/*
 * generated by Xtext 2.13.0
 */
package com.uk.eightpillars.nmtran.formatting2

import com.google.inject.Inject
import com.uk.eightpillars.nmtran.nmTran.NmBlock
import com.uk.eightpillars.nmtran.nmTran.NmHdrStatements
import com.uk.eightpillars.nmtran.nmTran.NmHeaderBlock
import com.uk.eightpillars.nmtran.nmTran.NmModel
import com.uk.eightpillars.nmtran.services.NmTranGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class NmTranFormatter extends AbstractFormatter2 {
	
	@Inject extension NmTranGrammarAccess

	def dispatch void format(NmModel nmModel, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		nmModel.getHeader.format;
		for (NmBlock nmBlock : nmModel.getBlocks()) {
			nmBlock.format;
		}
	}

	def dispatch void format(NmHeaderBlock nmHeaderBlock, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (NmHdrStatements nmHdrStatements : nmHeaderBlock.getStmts()) {
			nmHdrStatements.format;
		}
	}
	
	// TODO: implement for NmHeader, NmInput, NmDataSource, NmBlock, NmSubroutine, NmSubroutineOptions, NmEquation, OrExpression, AndExpression, EqualityExpression, RelationalExpression, AdditiveExpression, MultiplicativeExpression, PowerExpression, Expression, NmStatement, Parenthesis, FunctionCall, EtaLiteral, ThetaLiteral
}
