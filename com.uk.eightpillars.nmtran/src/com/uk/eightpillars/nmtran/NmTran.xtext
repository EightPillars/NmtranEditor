//grammar com.uk.eightpillars.nmtran.NmTran with org.eclipse.xtext.common.Terminals
//
//generate nmTran "http://www.uk.com/eightpillars/nmtran/NmTran"

grammar com.uk.eightpillars.nmtran.NmTran  hidden(SL_COMMENT,WS) 

generate nmTran "http://www.uk.com/eightpillars/nmtran/NmTran"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

NmModel: {NmModel}
	EOL*
	header=NmHeaderBlock
	blocks+=NmBlock*
	;

NmHeaderBlock: {NmHeaderBlock}
		(stmts+=NmHdrStatements+ EOL+)+
;

NmHeader:  {NmHeader} '$PROBLEM'  probStmt=StringLiteral
;

//NmDataDefn: {NmDataDefn}
//	header=NmInput EOL+
//	data=NmDataSource EOL+
//;

NmHdrStatements:
	NmInput|NmHeader |NmDataSource
;

NmInput:	{NmInput} '$INPUT' dataCols+=NmDataCol+ 
;

//NmDataCol:	{NmDataCol} name=DATA_NAME
//		;

NmDataCol:	{NmDataCol} name=ID '=' dataName=('DROP'|DATA_NAME)
		|	dataName=DATA_NAME ('=' name=ID)
		|	name=Identifier
		;

Identifier:	=> DATA_NAME | ID;

SymbolDefinition: NmDataCol |NmEquation | NmCompDefn
				;

NmDataSource: {NmDataSource} '$DATA' dataFile=NonQuoteString options+=NmOption*;

NonQuoteString:	PATH | ID | STRING;

//NmInputOptions: {NmInputOptions} option='IGNORE' '=' optVal=('@'|'#') ;

NmOption:	optName=OPNKWD ('=' optVal=Expression)?
			| optName=PARAM_OPN_KWD '(' optVal = Expression ')'
			| optVal=StringLiteral
			| optVal = SymbolReference
;


// Need to modify this so that a block can have an
// $ID  {options}  all on same line
// Followed by a body of expressions 
NmBlock: {NmBlock}
			blockName=('$PRED'|'$PK'|'$MODEL'|'$ERROR'|'$THETA'|'$OMEGA'|'$SIGMA'|'$DES'|'$EST'|'$TABLE'|'$SUBS') options+=NmOption* EOL+
//			blockName=(BLOCK_NAME) EOL+
			(eqns+=NmStatement EOL+)*
;



//NmSubroutine:	{NmSubroutine} '$SUBS' ID options=NmSubroutineOptions
//			;
//
//NmSubroutineOptions:	{NmSubroutineOptions} option='TOL' '=' expr=Expression
//			;

//NmCompDefn:  {NmCompDefn} 'COMP' '(' cmpId=ID ')'
//			;

NmStatement:
			NmEquation | NmCondStmt |NmOdeInit | NmOdeDefn |NmLimit| NmCompDefn
;

NmEquation returns NmStatement:
	{NmEquation} name=ID ('=' rhs=Expression)?
;

NmOdeInit returns NmStatement:
	{NmOdeInit} 'A_0'  '(' dvIdx=IntegerLiteral ')' '=' rhs=Expression
;

NmOdeDefn returns NmStatement:
	{NmOdeDefn} 'DADT'  '(' dvIdx=IntegerLiteral ')' '=' rhs=Expression
;

NmLimit returns NmStatement:
	{NmLimit} ('(' initial=RealLiteral  modifier=RANGE_MODIFIER? (',' upper=RealLiteral (',' lower = RealLiteral)? )? ')') 
			|   (initial=RealLiteral  modifier=RANGE_MODIFIER)
;

NmCompDefn returns NmStatement:
	{NmStatement} 'COMP' '(' name=ID ')'
; 


//NmUtility returns NmStatment:
//		{NmUtility} utilityName=('BLOCK'|'COMP') '(' utilityVal=Expression ')'
//;

//NmOption returns NmStatement:
//		{NmOption} option=ADVANREF
//;

Expression: OrExpression
;

OrExpression returns Expression:
	AndExpression (=>({OrExpression.leftOperand=current} feature='.OR.') rightOperand=AndExpression)*;


AndExpression returns Expression:
	EqualityExpression (=>({AndExpression.leftOperand=current} feature='.AND.') rightOperand=EqualityExpression)*;


EqualityExpression returns Expression:
	RelationalExpression (=>({EqualityExpression.leftOperand=current} feature=('.EQ.' | '.NE.'))
	rightOperand=RelationalExpression)*;


RelationalExpression returns Expression:
	AdditiveExpression
	(
	 =>({RelationalExpression.leftOperand=current} feature=('.GE.' | '.LE.' | '.GT.' | '.LT.')) rightOperand=AdditiveExpression)*;


AdditiveExpression returns Expression:		
					MultiplicativeExpression ({AdditiveExpression.lhs=current} opType=('+'|'-') rhs=MultiplicativeExpression)*
;

MultiplicativeExpression returns Expression:
					PowerExpression ({MultiplicativeExpression.lhs=current} opType=('*'|'/') rhs=PowerExpression)*
;


PowerExpression returns Expression:
					UnaryExpression ({PowerExpression.lhs=current} opType=('^') rhs=UnaryExpression)*
;

UnaryExpression returns Expression:
	(opType = ('-'|'+'))? lhs=PrimaryExpression
;

PrimaryExpression returns Expression:
		StringLiteral|
		IntegerLiteral|
		RealLiteral|
		FunctionCall|
		UtilityReference|
//		EtaLiteral|
//		EpsLiteral|
//		ThetaLiteral|
		SymbolReference|
		ODERef|
		Parenthesis |
		SpecialVars
;


NmCondStmt returns NmStatement:
	'IF' '(' condExpr=Expression ')' 'THEN' EOL+ (thenExprs+=NmStatement EOL+)+ (=>'ELSE' EOL+ (elseExprs+=NmStatement EOL+)+ )? 'ENDIF'
;

Parenthesis returns Expression: {Parenthesis} '(' expr=Expression ')';

SymbolReference returns Expression: {SymbolReference} ref=[SymbolDefinition|Identifier];

ODERef returns Expresson: {ODERef}  'A' '(' dvIdx = IntegerLiteral ')' ;

FunctionCall returns Expression: {FunctionCall} fName=FNAME '(' args+=Expression (',' args+=Expression)* ')' ;

SpecialVars returns Expression:	{SpecialVars}	varName=(IDV|IGNORE_CHARS|SAEM_VAL);

UtilityReference returns Expression: {EtaLiteral} utilName=('ETA'|'EPS'|'THETA') '(' etaId=IntegerLiteral ')';

//EpsLiteral returns Expression: {EtaLiteral} 'EPS' '(' etaId=IntegerLiteral ')';
//
//ThetaLiteral returns Expression: {ThetaLiteral} 'THETA' '(' thetaId=IntegerLiteral ')';

StringLiteral:	value=STRING
	
;

IntegerLiteral:	value=INT
	
;


RealLiteral: value = REAL
	
;

EOL: NEWLINE;

//terminal BLOCK_NAME:	'$' ID;

terminal FNAME: 'LOG'|'EXP';

RANGE_MODIFIER:  'FIX'| 'SD';

OPNKWD:		'IGNORE'|(ADVAN)|'CORRELATION' | 'SD' | 'TOL' | 'METHOD' | 'AUTO' | 'PRINT'|'NOAPPEND'|'NOPRINT'|'FILE';

terminal ADVAN :			'ADVAN' ('0'..'9') ('0'..'9')?
;

terminal IDV	:	'T';

terminal DATA_NAME: 'ID'|'TIME'|'RATE'|'AMT'|'DV'|'II'|'CMT'|'SS';

terminal IGNORE_CHARS:	'@' | '#';

terminal SAEM_VAL: 		'SAEM';

//terminal COMPREF : 'COMP' ('0'..'9');

terminal PARAM_OPN_KWD : 'BLOCK';

terminal SL_COMMENT:	';' !('\n'|'\r')*;

terminal STRING:		'"' (!('"'|'\n'|'\r'))* '"';

terminal ID :			(('a'..'z')|('A'..'Z')) (('a'..'z')|('A'..'Z')|('0'..'9')|'_')*;

//terminal fragment IS_BEGIN_A: ('A'|'a') (('a'..'z')|('A'..'Z')|(('0'..'9') ('a'..'z')|('A'..'Z')|('0'..'9')|'_')*)?;
//
//terminal fragment RAW_ID: (('b'..'z')|('B'..'Z')) (('a'..'z')|('A'..'Z')|('0'..'9')|'_')*;
//
//terminal ID:		IS_BEGIN_A | RAW_ID;


//terminal fragment CHAR:			('a'..'z')|('A'..'Z')|('0'..'9')|'@'|'#'|'£'|'/'|'\\'|'.'|'_'|'-';

terminal fragment NON_NUM_CHAR:			('a'..'z')|('A'..'Z')|'@'|'#'|'£'|'/'|'\\'|'.'|'_'|'-';
//
//terminal fragment DIGIT:			'0'..'9';

terminal INT returns ecore::EInt:
					('0'..'9')+
				;

terminal REAL:			INT '.' INT;

terminal fragment _WS:			' '|'\t';

terminal fragment _NEWLINE:		('\r'? '\n');

terminal WS:			_WS;

terminal NEWLINE:		_NEWLINE;

//terminal fragment ALL_SPACE: _WS|_NEWLINE;

//terminal WS:			' '|'\t';
//
//terminal NEWLINE:		('\r'? '\n');

terminal PATH:		!(' '|'\t'|'\r'|'\n')+; 

//terminal BEGIN: 'synthetic:BEGIN';
