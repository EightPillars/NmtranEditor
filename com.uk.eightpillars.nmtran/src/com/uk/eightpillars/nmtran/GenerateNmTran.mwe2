module com.uk.eightpillars.nmtran.GenerateNmTran

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = ".."
var projectName = "com.uk.eightpillars.nmtran"

Workflow {
	
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = projectName
				rootPath = rootPath
				runtimeTest = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = true
				}
                genericIde = {
                		enabled = true
                }
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = StandardLanguage {
			name = "com.uk.eightpillars.nmtran.NmTran"
			fileExtensions = "ctl"

			serializer = {
				generateStub = false
			}
			validator = {
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}
			parserGenerator = {
				options = {
					ignoreCase = true
				}
				
			}
			scopeProvider = {
				ignoreCase = true
			}
			generator = {
				generateJavaMain = false
				generateStub = false
			}
			formatter = {
				generateXtendStub = true
			}
			
		}
//       language = XtextGeneratorLanguage {
//            name = "${projectName}.NmTran"
//            fileExtensions = "ctl"
//            
//	    		fragment = ecore.EMFGeneratorFragment2 {
//	    		}
//
//            fragment = serializer.SerializerFragment2 {
//            		generateStub = false
//            }
//
//
//    		fragment = grammarAccess.GrammarAccessFragment2 { }
//    
//    		// a custom ResourceFactory for use with EMF
//    		fragment = resourceFactory.ResourceFactoryFragment2 {}
//    
//    		// The antlr parser generator fragment.
//    		fragment = parser.antlr.XtextAntlrGeneratorFragment2 {
//    		}
//    
//    		// Xtend-based API for validation
//    		fragment = validation.ValidatorFragment2 {
//    		//    composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
////    			composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
//    			generateXtendStub = true
//    		}
//    
//    		// scoping and exporting API
//    		fragment = scoping.ImportNamespacesScopingFragment2 {
//    			generateXtendStub = true
//    		}
//    		fragment = exporting.QualifiedNamesFragment2 {}
//    		fragment = builder.BuilderIntegrationFragment2 {}
//    
//    		// generator API
////    		fragment = generator.GeneratorFragment2 {
////    			generateXtendMain = false
////    			generateXtendStub = false
////    		}
//    
//    		// formatter API
//    		fragment = formatting.Formatter2Fragment2 {
//    			generateXtendStub = true
//    		}
//    
//    		// labeling API
//    		fragment = ui.labeling.LabelProviderFragment2 {
//    			generateXtendStub = true
//    		}
//    
//    		// outline API
//    		fragment = ui.outline.OutlineTreeProviderFragment2 {
//    			generateXtendStub = true
//    		}
//    		fragment = ui.outline.QuickOutlineFragment2  {}
//    
//    		// quickfix API
//    		fragment = ui.quickfix.QuickfixProviderFragment2 {
//    			generateXtendStub = true
//    		}
//    
//    		// content assist API
//    		fragment = ui.contentAssist.ContentAssistFragment2 {
//    			generateXtendStub = true
//    		}
//    
////    		// generates a more lightweight Antlr parser and lexer tailored for content assist
////    		fragment = Xtext parser.antlr.XtextAntlrUiGeneratorFragment {}
//    
//    		// generates junit test support classes into Generator#pathTestProject
//    		fragment = junit.Junit4Fragment2 { }
//    
//	         fragment = ui.projectWizard.SimpleProjectWizardFragment2 {
//	         	generate = false
//	//                  generatorProjectName = "${projectName}.generator"
//	//                  fileExtension = file.extensions
//	        }
//    
//    		// rename refactoring
//    		fragment = ui.refactoring.RefactorElementNameFragment2 {}
//    
//    		// provides a preference page for template proposals
//    		fragment = ui.templates.CodetemplatesGeneratorFragment2 {}
//    
//    		// provides a compare view
//    		fragment = ui.compare.CompareFragment2 {}
//        }
	}
}
