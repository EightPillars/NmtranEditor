/*
 * generated by Xtext 2.9.2
 */
package com.uk.eightpillars.nmtran.tests

import com.google.inject.Inject
import com.uk.eightpillars.nmtran.nmTran.NmModel
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.Test
import org.junit.runner.RunWith
import com.uk.eightpillars.nmtran.tests.NmTranInjectorProvider
import java.io.FileReader
import java.io.InputStream
import org.junit.Ignore

@RunWith(XtextRunner)
@InjectWith(NmTranInjectorProvider)
@Ignore("Not implemented yet")
class NmTranFullUseCaseTest{

	static val USE_CASE_DIR = "/"

	@Inject extension
	ParseHelper<NmModel>
	@Inject extension
	ValidationTestHelper 

	private def readFile(String fileName){
		var InputStream in = null
		try{
			in = System.getResourceAsStream(fileName)
			var byte[] buf = newByteArrayOfSize(2048)
			var mdlStr = ""
			var c = 0
			while((c = in.read(buf, 0, buf.length)) != -1){
				mdlStr = mdlStr.concat(new String(buf, 0, c))
			}
			mdlStr
		}
		finally{
			in?.close
		}
	}

	private def assertUseCase(String useCaseName){
		val mclFile = USE_CASE_DIR + useCaseName + ".ctl"
		val mcl = readFile(mclFile).parse
		mcl.assertNoErrors
	} 


	@Ignore("Not implemented")
	def void testUseCase1() {
		assertUseCase("UseCase1")
	}

	@Ignore("Not implemented")
	def void testUseCase2() {
		assertUseCase("UseCase2")
	}

	@Ignore("Not implemented")
	def void testUseCase3() {
		assertUseCase("UseCase3")
	}

	@Ignore("Not implemented")
	def void testUseCase4() {
		assertUseCase("UseCase4")
	}

	@Ignore("Not implemented")
	def void testUseCase5() {
		assertUseCase("UseCase5")
	}

	@Ignore("Not implemented")
	def void testUseCase6() {
		assertUseCase("UseCase6")
	}

	@Ignore("Not implemented")
	def void testUseCase7() {
		assertUseCase("UseCase7")
	}

	@Ignore("Not implemented")
	def void testUC001_00_Holford_PK_DEQ_linCov_libErr_Tlag() {
		assertUseCase("UC001_00_Holford_PK_DEQ_linCov_libErr_Tlag")
	}

	@Ignore("Not implemented")
	def void testUC001_08_Holford_PK_DEQ_gen2Cov_libErr_Tlag() {
		assertUseCase("UC001_08_Holford_PK_DEQ_gen2Cov_libErr_Tlag")
	}

	@Ignore("Not implemented")
	def void testUC001_09_Holford_PK_DEQ_genCov_genErr_Tlag() {
		assertUseCase("UC001_09_Holford_PK_DEQ_genCov_genErr_Tlag")
	}

}
